#include "pch.h"

#include "iostream"

#include "conio.h"

#include <Windows.h>

#include <stdio.h>

#include <mmsystem.h>

#define FILAS 30

#define COLUMNAS 200

#define ARRIBA 72

#define ABAJO 80

#define ENTER 13



using namespace System;

using namespace std;





void ubicar(int x, int y) {

    Console::SetCursorPosition(x, y);

}



void borrar(int x, int y)

{

    Console::ForegroundColor = ConsoleColor::Black;

    ubicar(x, y);   cout << " " << " " << " ";

    ubicar(x, y + 1); cout << " " << " " << " ";

    ubicar(x, y + 2); cout << " " << " " << " ";



}

void personaje(int x, int y)

{

    Console::ForegroundColor = ConsoleColor::Cyan;

    ubicar(x, y);   cout << " " << "O" << " ";

    ubicar(x, y + 1);   cout << (char)47 << (char)124 << (char)92;

    ubicar(x, y + 2); cout << (char)47 << " " << (char)92;

}







void color(int c) {

    //Definir el color

    switch (c) {

    case 1: Console::ForegroundColor = ConsoleColor::Blue; break;

    case 2: Console::ForegroundColor = ConsoleColor::Red; break;

    case 3: Console::ForegroundColor = ConsoleColor::DarkGreen; break;

    case 4: Console::ForegroundColor = ConsoleColor::Green; break;

    case 5: Console::ForegroundColor = ConsoleColor::White; break;

    case 6: Console::ForegroundColor = ConsoleColor::Yellow; break;

    case 7: Console::ForegroundColor = ConsoleColor::Cyan; break;

    case 8: Console::ForegroundColor = ConsoleColor::Magenta; break;

    }

}



void gotoxy(int x, int y) {

    COORD coord;



    coord.Y = y;

    coord.X = x;

    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

}

void ventana() {

    Console::SetWindowSize(85, 40);

}

void ImprimirLetraporletra(string texto) {
    int i = 0;
    for (int i = 0; texto[i] != '\0';i++) {
        cout << texto[i]; _sleep(30);
    }
}
void ContarHistoria() {
    ubicar(10, 10);
    //Usamos el tipo de dato "String" para que reconozca acentos ya que es un tipo de dato cadena
    string historia1 = "En un tiempo no muy lejano, cuando los bosques eran vastos y rebosantes de vida, existía un mundo próspero y equilibrado. Los árboles se alzaban majestuosamente, proporcionando refugio a una amplia variedad de animales y plantas. Los ríos fluían cristalinos, y el aire fresco susurraba secretos ancestrales entre las hojas.";
    string historia2 = "Sin embargo, en medio de esta armonía, surgió una codicia desenfrenada. Los seres humanos, seducidos por la promesa de riquezas y poder, comenzaron a explotar los recursos naturales sin medida. A medida que la deforestación se extendía como una plaga, los bosques comenzaron a desaparecer, y con ellos, las vidas que dependían de ellos.";
    string historia3 = "En este mundo desolado, donde el sonido del hacha resonaba constantemente, nace tu historia. Eres un ambicioso empresario, un magnate de los negocios decidido a convertirte en el más poderoso y adinerado del mundo. Con una visión a corto plazo, has decidido que la deforestación es la clave para alcanzar tus objetivos.";
    string historia4 = "Tu misión es clara: talar todos los árboles que encuentres en tu camino para obtener la mayor cantidad de dinero posible. Eres un conductor de la destrucción, un símbolo de la avaricia humana que busca maximizar tus ganancias sin importar las consecuencias. Cada árbol que cae bajo tu hacha te acerca más a tu objetivo, pero también empuja al mundo hacia un destino sombrío.";
    string historia5 = "A medida que avanzas en tu emprendimiento, podrás adquirir equipos más eficientes y destructivos. Los bosques se desvanecen ante tus ojos, mientras el dinero fluye en tus arcas. Pero a medida que sigues tu camino, comenzarás a notar los cambios. Los animales que solían habitar los bosques han desaparecido lentamente. Los ríos se vuelven turbios y carentes de vida. El aire se vuelve irrespirable";
    color(6);
    ImprimirLetraporletra(historia1);
    cout << endl;
    color(6);
    cout << "Press any key to continue...";
   
    getch();

    system("cls");
    ubicar(10, 10);
    color(6);
    ImprimirLetraporletra(historia2);
   
    cout << endl;
    color(6);
    cout << "Press any key to continue...";
    //segunda vez
    getch();

    system("cls");
    ubicar(10, 10);
    color(6);
    ImprimirLetraporletra(historia3);
    //tercera vez
    getch();

    system("cls");
    ubicar(10, 10);
    color(6);
    ImprimirLetraporletra(historia4);
    //cuarta vez
    getch();

    system("cls");
    ubicar(10, 10);
    color(6);
    ImprimirLetraporletra(historia5);

}

void loraxDibujo() {

    //define la matriz



    int matrix[FILAS][COLUMNAS] = {



  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,3,3,1,1,1,1,3,3,1,1,1,1,3,3,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,3,3,3,3,1,1,0,0,3,3,0,0,1,1,3,3,3,3,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,3,3,2,2,2,2,3,3,4,4,3,3,2,2,2,2,3,3,0,0,0,0,0,0},

  {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,0,0,0,0},

  {0,0,0,0,0,0,0,0,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,0,0,0,0,0,0},

  {0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0},

  {0,0,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3},

  {0,0,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3},

  {0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0},

  {0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0},

  {0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0},





    };



    for (int f = 0; f < FILAS; f++)

    {

        for (int c = 0; c < COLUMNAS; c++)

        {

            if (matrix[f][c] == 0) Console::ForegroundColor = ConsoleColor::Black;

            if (matrix[f][c] == 1) Console::ForegroundColor = ConsoleColor::White;

            if (matrix[f][c] == 2) Console::ForegroundColor = ConsoleColor::Yellow;

            if (matrix[f][c] == 3) Console::ForegroundColor = ConsoleColor::Red;

            if (matrix[f][c] == 4) Console::ForegroundColor = ConsoleColor::DarkYellow;

            cout << (char)219;

        }

        cout << endl;



    }



}



void juego() {

    srand(time(nullptr));

    //define la matriz

    int matrix[FILAS][COLUMNAS] = {



  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},

  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},





    };



    for (int f = 0; f < FILAS; f++)

    {

        for (int c = 0; c < COLUMNAS; c++)

        {

            if (matrix[f][c] == 0) Console::ForegroundColor = ConsoleColor::Black;

            if (matrix[f][c] == 1) Console::ForegroundColor = ConsoleColor::Green;

            if (matrix[f][c] == 2) Console::ForegroundColor = ConsoleColor::Yellow;

            if (matrix[f][c] == 3) Console::ForegroundColor = ConsoleColor::Red;

            if (matrix[f][c] == 4) Console::ForegroundColor = ConsoleColor::DarkGreen;

            cout << (char)219;

        }

        cout << endl;

    }



    //personaje

    int x = 10, y = 10;

    personaje(x, y);



    while (1)

    {

        if (_kbhit())

        {

            char tecla = _getch();

            borrar(x, y);

            if (tecla == 77 && matrix[y][x + 3] == 0) {

                x++;

            }

            if (tecla == 75 && matrix[y + 1][x - 1] == 0) {
                x--;
            }

            if (tecla == 80 && matrix[y + 3][x] == 0 && matrix[y + 2][x + 1] == 0 && matrix[y + 1][x + 2] == 0)
            {

                y++;
            }
            if (tecla == 72 && matrix[y - 1][x + 2] == 0 && matrix[y + 1][x + 2] == 0 && matrix[y + 2][x + 2] == 0)

            {

                y--;

            }

            personaje(x, y);

        }
    }
}

void menuSelector() {
    //Para que repita sin if de por medio

    bool repite = true;

    int opcion = 1;

    do {
        system("cls");//Limpia la screen
        gotoxy(30, 2 + 1);

        cout << (opcion == 1 ? "> " : " ") << "1. Jugar" << endl;

        gotoxy(30, 2 + 2);

        cout << (opcion == 2 ? "> " : " ") << "2. Instrucciones" << endl;

        gotoxy(30, 2 + 3);

        cout << (opcion == 3 ? "> " : " ") << "3. Desarrolladores" << endl;

        gotoxy(30, 2 + 4);

        cout << (opcion == 4 ? "> " : " ") << "4. Salir del juego :C" << endl;

        switch (opcion) {

        case 1:
            color(2);

            gotoxy(30, 2 + 2);

            color(5); cout << (opcion == 2 ? "> " : " ") << "2. Instrucciones" << endl;

            gotoxy(30, 2 + 3);

            color(5); cout << (opcion == 3 ? "> " : " ") << "3. Desarrolladores" << endl;

            gotoxy(30, 2 + 4);

            color(5); cout << (opcion == 4 ? "> " : " ") << "4. Salir del juego :C" << endl;
            break;
        case 2:
            color(5);
            gotoxy(30, 2 + 2);
            color(2); cout << (opcion == 2 ? "> " : " ") << "2. Instrucciones" << endl;
            gotoxy(30, 2 + 3);
            color(5); cout << (opcion == 3 ? "> " : " ") << "3. Desarrolladores" << endl;
            gotoxy(30, 2 + 4);
            color(5); cout << (opcion == 4 ? "> " : " ") << "4. Salir del juego :C" << endl;
            break;
        case 3:
            gotoxy(30, 2 + 2);
            color(5); cout << (opcion == 2 ? "> " : " ") << "2. Instrucciones" << endl;
            gotoxy(30, 2 + 3);
            color(2); cout << (opcion == 3 ? "> " : " ") << "3. Desarrolladores" << endl;
            gotoxy(30, 2 + 4);
            color(5); cout << (opcion == 4 ? "> " : " ") << "4. Salir del juego :C" << endl;
            break;
        case 4:
            color(5);
            gotoxy(30, 2 + 2);
            color(5); cout << (opcion == 2 ? "> " : " ") << "2. Instrucciones" << endl;
            gotoxy(30, 2 + 3);
            color(5); cout << (opcion == 3 ? "> " : " ") << "3. Desarrolladores" << endl;
            gotoxy(30, 2 + 4);
            color(2); cout << (opcion == 4 ? "> " : " ") << "4. Salir del juego :C" << endl;
            break;
        default:
            break;
        }
        char tecla = _getch(); // Lee una tecla sin esperar el Enter
        switch (tecla) {
        case 'w': // Flecha hacia arriba
        case 'W':
            opcion--;
            if (opcion < 1) opcion = 4;
            break;
        case 's': // Flecha hacia abajo
        case 'S':
            opcion++;
            if (opcion > 4) opcion = 1;
            break;
        case 72: // Código ASCII para la tecla "arriba"
            opcion--;
            if (opcion < 1) opcion = 4;
            break;
        case 80: // Código ASCII para la tecla "abajo"
            opcion++;
            if (opcion > 4) opcion = 1;
            break;
        case 13: // Tecla Enter
            switch (opcion) {
            case 1:
                system("cls");
                ContarHistoria();
                system("cls");
                juego();
                break;
            case 2:
                cout << "Elegiste Instrucciones, ahora espera" << endl;
                break;
            case 3:
                cout << "Elegiste Desarrolladores, ahora espera" << endl;
                break;
            case 4:
                repite = false;
                exit(0);
                break;
            default:
                cout << "Opción inválida. Introduce un número válido." << endl;
                break;
            }
            cout << "Presiona cualquier tecla para continuar..." << endl;
            _getch(); // Espera a que se presione cualquier tecla
            break;
        }
    } while (repite);

}